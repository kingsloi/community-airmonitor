extends layout

block content
  .container
    .row
      .col-xl-6
        h1.h2.pb-3 Miller Beach / NWI Air Quality

        h2.small.text-uppercase.mb-0.text-dark Currently

        .row.mb-3
          if ! airshit
            .col-md-6.py-2
              p.small.text-uppercase.text-center No measurements have been taken yet.

          if airshit && airshit.PM25REALTIME
            .col-md-6.py-2
              .card.h-100.aqi(class={
                'aqi--good': airshit.PM25REALTIME['category'] === 'Good',
                'aqi--moderate': airshit.PM25REALTIME['category'] === 'Moderate',
                'aqi--unhealthy-sensitive': airshit.PM25REALTIME['category'] === 'Unhealthy for Sensitive Groups',
                'aqi--unhealthy': airshit.PM25REALTIME['category'] === 'Unhealthy',
                'aqi--unhealthy-very': airshit.PM25REALTIME['category'] === 'Very Unhealthy',
                'aqi--death': airshit.PM25REALTIME['category'] === 'Hazardous',
              })
                .card-body
                  .rotate
                    i.fa.fa-signal.fa-5x
                  h3.h6.text-uppercase PM2.5
                  p.display-4.font-weight-bold.mb-0 #{airshit.PM25REALTIME['aqi']}
                  h4.lead.mb-0.pl-2 #{airshit.PM25REALTIME['category']}

          if airshit && airshit.PM10REALTIME
            .col-md-6.py-2
              .card.h-100.aqi(class={
                'aqi--good': airshit.PM10REALTIME['category'] === 'Good',
                'aqi--moderate': airshit.PM10REALTIME['category'] === 'Moderate',
                'aqi--unhealthy-sensitive': airshit.PM10REALTIME['category'] === 'Unhealthy for Sensitive Groups',
                'aqi--unhealthy': airshit.PM10REALTIME['category'] === 'Unhealthy',
                'aqi--unhealthy-very': airshit.PM10REALTIME['category'] === 'Very Unhealthy',
                'aqi--death': airshit.PM10REALTIME['category'] === 'Hazardous',
              })
                .card-body
                  .rotate
                    i.fa.fa-signal.fa-5x
                  h3.h6.text-uppercase PM10
                  p.display-4.font-weight-bold.mb-0 #{airshit.PM10REALTIME['aqi']}
                  h3.lead.mb-0.pl-2 #{airshit.PM10REALTIME['category']}

        h2.small.text-uppercase.mb-2.text-dark Historical Highs

        .row.mb-3.no-gutters
          if ! highs.week && ! highs.month && ! highs.year
            .col-md-6.py-2
              p.small.text-uppercase.text-center No measurements have been taken yet.

          if highs.week
            .col-md-4
              .card.br-0
                .card-header
                  h5.mb-0.card-title.text-uppercase.small
                    | Week High
                .card-body.aqi-stat(class={
                  'aqi-stat--good': _.inRange(highs.week.totalAirQuality(), 0, 50),
                  'aqi-stat--moderate': _.inRange(highs.week.totalAirQuality(), 51, 100),
                  'aqi-stat--unhealthy-sensitive': _.inRange(highs.week.totalAirQuality(), 101, 150),
                  'aqi-stat--unhealthy': _.inRange(highs.week.totalAirQuality(), 151, 200),
                  'aqi-stat--unhealthy-very': _.inRange(highs.week.totalAirQuality(), 201, 300),
                  'aqi-stat--death': highs.week.totalAirQuality() >= 301,
                })
                  .rotate
                    i.fa.fa-signal.fa-5x
                  small.d-block.font-weight-bold.text-uppercase.text-muted PM2.5 + PM10
                  p.h4.font-weight-bold.mb-0.aqi-stat__stat #{highs.week.totalAirQuality()}
                  p.small.mb-0(title=`${moment(highs.week.createdAt)}`) #{moment(highs.week.createdAt).format('dd Do MMM YY HH:mm.')}

          if highs.month
            .col-md-4
              .card.br-0
                .card-header
                  h5.mb-0.card-title.text-uppercase.small
                    | Month High
                .card-body.aqi-stat(class={
                  'aqi-stat--good': _.inRange(highs.month.totalAirQuality(), 0, 50),
                  'aqi-stat--moderate': _.inRange(highs.month.totalAirQuality(), 51, 100),
                  'aqi-stat--unhealthy-sensitive': _.inRange(highs.month.totalAirQuality(), 101, 150),
                  'aqi-stat--unhealthy': _.inRange(highs.month.totalAirQuality(), 151, 200),
                  'aqi-stat--unhealthy-very': _.inRange(highs.month.totalAirQuality(), 201, 300),
                  'aqi-stat--death': highs.month.totalAirQuality() >= 301,
                })
                  .rotate
                    i.fa.fa-signal.fa-5x
                  small.d-block.font-weight-bold.text-uppercase.text-muted PM2.5 + PM10
                  p.h4.font-weight-bold.mb-0.aqi-stat__stat #{highs.month.totalAirQuality()}
                  p.small.mb-0(title=`${moment(highs.month.createdAt)}`) #{moment(highs.month.createdAt).format('dd Do MMM YY HH:mm.')}

          if highs.year
            .col-md-4
              .card.br-0
                .card-header
                  h5.mb-0.card-title.text-uppercase.small
                    | Year High
                .card-body.aqi-stat(class={
                  'aqi-stat--good': _.inRange(highs.year.totalAirQuality(), 0, 50),
                  'aqi-stat--moderate': _.inRange(highs.year.totalAirQuality(), 51, 100),
                  'aqi-stat--unhealthy-sensitive': _.inRange(highs.year.totalAirQuality(), 101, 150),
                  'aqi-stat--unhealthy': _.inRange(highs.year.totalAirQuality(), 151, 200),
                  'aqi-stat--unhealthy-very': _.inRange(highs.year.totalAirQuality(), 201, 300),
                  'aqi-stat--death': highs.year.totalAirQuality() >= 301,
                })
                  .rotate
                    i.fa.fa-signal.fa-5x
                  small.d-block.font-weight-bold.text-uppercase.text-muted PM2.5 + PM10
                  p.h4.font-weight-bold.mb-0.aqi-stat__stat #{highs.year.totalAirQuality()}
                  p.small.mb-0(title=`${moment(highs.year.createdAt)}`) #{moment(highs.year.createdAt).format('dd Do MMM YY HH:mm.')}

        p.lead.text-right.text-uppercase
          a(href="/past" role="button")
            | see past air quality
            i.fa.pl-1.fa-chevron-right(aria-hidden='true')

        p.lead.font-we We track #[a(href="https://www.epa.gov/pm-pollution/particulate-matter-pm-basics#PM" role="button" target="_blank")= "PM2.5, PM10"], temperature, humidity, pressure, and reported weather (including wind speeds, direction, cloud coverage, etc.), so we can (hopefully) determine who, where, what, and how the weather affects the quality of the air we breathe, from a community-funded air sensor in the scenic Miller neighborhood of Gary, Indiana.

        p.lead In the future, depending on what data is openly available, we may be able to also gather data from the many industries around the area, such as train schedules, burn schedules, #[del traffic congestion], construction, #[del air traffic], mill non-conformances, shipping schedules on Lake Michigan, etc.

        p.lead There are plenty of other pollutants in the air we're not tracking, such as SO₂, NO₂, CO, to name a few. As soon as affordable ways of tracking these pollutants in our neighbourhood, we'll track it and add it to our data.

      .col-xl-6
        div.table-responsive
          table.table
            tbody
              if ! airshit
                tr
                  td(colspan="2")
                    p.small.text-uppercase.text-center.mb-0 No measurements have been taken yet.

              if airshit
                tr
                  td(colspan="2")
                    p.lead.text-center.font-weight-bold.mb-0.p-2 #{airshit.REPORTED_WEATHER['summary']} - #{airshit.TEMP_F} &deg;F
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Dew Point
                  td()
                    p.lead.mb-0 #{airshit.REPORTED_WEATHER['dewPoint'].toFixed(0)} &deg;F
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Cloud Coverage
                  td()
                    p.lead.mb-0 #{(airshit.REPORTED_WEATHER['cloudCover'] * 100).toFixed(0)} %
                tr
                  td
                    p.lead.font-weight-bold.mb-0 UV Index
                  td()
                    p.lead.mb-0 #{airshit.REPORTED_WEATHER['uvIndex'].toFixed(0)}
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Pressure
                  td()
                    p.lead.mb-0 #{(airshit.PRESSURE_BAR * 0.02953).toFixed(0) } #[sub in Hg]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Rain Intensity
                  td()
                    p.lead.mb-0 #{airshit.REPORTED_WEATHER['precipIntensity']} #[sub in of liquid water]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Humidity
                  td()
                    p.lead.mb-0 #{airshit.HUMIDITY_PERCENT} #[sub %]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 OZone
                  td()
                    p.lead.mb-0 #{airshit.REPORTED_WEATHER['ozone'].toFixed(0)} #[a(href="https://en.wikipedia.org/wiki/Dobson_unit" role="button" target="_blank") #[sub DU]]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Visibility
                  td()
                    p.lead.mb-0 #{airshit.REPORTED_WEATHER['visibility'].toFixed(0)} #[sub miles]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Wind Speed
                  td()
                    p.lead.mb-0
                      span.mr-3 #{airshit.REPORTED_WEATHER['windSpeed'].toFixed(0)} - #{airshit.REPORTED_WEATHER['windGust'].toFixed(0)} #[sub mph] /
                      span.d-inline-block.lead.mb-0(title=`wind bearing from ${airshit.REPORTED_WEATHER['windBearing']}\xB0`, style=`transform: rotate(${degeesToRotation(airshit.REPORTED_WEATHER['windBearing'])}deg)`)
                        | &#x2191;
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Trains in #[abbr(title="See 'Region' below for coordinates") Region]
                  td()
                    p.lead.mb-0 #{airshit.TRAINS.SOUTHSHORE.length} #[small.small.font-weight-light southshore]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Traffic in #[abbr(title="See 'Region' below for coordinates") Region]
                  td()
                    p.lead.mb-0
                      span.separator
                        | #{airshit.TRAFFIC.INCIDENTS.length} #[small.small.font-weight-light incidents]
                      span.separator
                        | #{airshit.congestionMiles()} #[small.small.font-weight-light miles of congestion]
                      span.separator
                        | #{airshit.congestionTime()} #[small.small.font-weight-light minutes of congestion]
                tr
                  td
                    p.lead.font-weight-bold.mb-0 Flights over #[abbr(title="See 'Region' below for coordinates") Region]
                  td()
                    p.lead.mb-0
                      span.separator
                        | #{airshit.FLIGHTS.GYY.length} #[small.small.font-weight-light to/from Gary/GYY]
                      span.separator
                        | #{airshit.FLIGHTS.MDW.length} #[small.small.font-weight-light to/from Midway/MDW]
                      span.separator
                        | #{airshit.FLIGHTS.ORD.length} #[small.small.font-weight-light to/from O'Hare/ORD]

            tfoot
              tr
                th(colspan="2" class="small text-uppercase text-right")
                  p.mb-0
                    | Temperature, humidity, pressure recorded at sensor
                    br
                    | Sensor: #[code #{location.lat},#{location.lon}]
                    br
                    | Region:
                    - var coordinates = region.map((array) => array.reverse()).join("\r\n");
                    | #[a.pl-1(href=`https://www.keene.edu/campus/maps/tool/?coordinates=${encodeURIComponent(coordinates)}` target="_blank" title=`${coordinates}`)= "coordinates"]
                    br
                    span.d-block
                      | Weather by: #[a(href=`https://darksky.net/forecast/${location.lat},${location.lon}/us12/en` target="_blank")= "darksky.net"]
                    span.d-block
                      | Trains by: #[a(href=`http://southshore.etaspot.net` target="_blank")= "southshore.etaspot.net"]
                    span.d-block
                      | Traffic by: #[a(href=`http://southshore.etaspot.net` target="_blank")= "mapquest.com"]
                    span.d-block
                      | Flight Tracking by: #[a(href=`https://aviation-edge.com` target="_blank")= "aviation-edge.com"]
                    br
                    if airshit
                      | Last Updated #{timestampToHuman(airshit.LAST_READ_AT)} ago

        //=JSON.stringify(airshit)

    hr.my-5.pb-4
    .row
      .col-md-6
        h2.h4.text-uppercase.font-weight-light Special Thanks / Contributions
        p.mb-2(style="font-size:2rem;") 👏👏👏👏👏
        p.lead #[a(href="https://www2.purpleair.com/collections/air-quality-sensors/products/purpleair-pa-ii" role="button" target="_blank")= "PurpleAir sensor"] crowd funded by:

        ul.lead.mb-4
          li Mary
          li Adam
          li Sloan
          li Leslie
          li Danielle
          li Kingsley
          li Kathy
          li Scott
          li Beth
          li Megan

        p.lead.aviation-edge.mb-5.mb-md-0
          | Flight tracking provided by:
          | #[a(href="https://aviation-edge.com/" role="button" target="_blank") #[img.d-block.mt-2(src='/images/aviation-edge-logo-small-medium.png')]]

      .col-md-6
        h2.h4.text-uppercase.font-weight-light News / Links / Sources
        ul
          li Website: #[a(href="https://waqi.info/" target="_blank")= "World's Air Pollution: Real-time Air Quality Index"]
          li Website: #[a(href="https://aqicn.org/city/usa/indiana/gary-iitri/" target="_blank")= "IIT Research Institute's Gary, IN Air Quality Monitor"]
          li Website: #[a(href="https://www.in.gov/idem/airquality/pages/monitoring_data/pm25.html" target="_blank")= "IDEM PM2.5 Monitoring Locations"]
          li Website: #[a(href="https://www.wunderground.com/wundermap?lat=41.602&lon=-87.337" target="_blank")= "Wunderground Weather"]
          li Website: #[a(href="https://airnow.gov/index.cfm?action=airnow.local_city&cityid=58" target="_blank")= "GOV/EPA Gary/Hammond Air Quality"]
          li Website: #[a(href="https://echo.epa.gov/facilities/facility-search" target="_blank")= "EPA Facility Lookup"]
            ul
              li e.g. #[a(href="https://echo.epa.gov/detailed-facility-report?fid=110000607558" target="_blank")= "ARCELORMITTAL BURNS HARBOR"]
          li Website: #[a(href="https://www.lung.org/our-initiatives/healthy-air/sota/city-rankings/states/indiana/lake.html" target="_blank")= "Lake County, IN Air Quality | lung.org"]
          li Lawsuit: #[a(href="http://elpc.org/newsroom/press-releases/60-day-notice-clean-water-act-lawsuit-arcelormittal-100-violations-permit-since-2015/" target="_blank")= "ELPC vs. ArcelorMittalLawsuit"]
          li Study / Whitepaper: #[a(href="https://www.sciencedirect.com/science/article/pii/S0160412019301941" target="_blank")= "The first pollution investigation of road sediment in Gary, Indiana: Anthropogenic metals and possible health implications for a socioeconomically disadvantaged area"]


